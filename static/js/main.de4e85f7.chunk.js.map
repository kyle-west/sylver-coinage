{"version":3,"sources":["components/GameBoard/index.js","components/GameMath.js","components/GameHistory/index.js","App.js","serviceWorker.js","index.js"],"names":["GameBoard","_ref","possibleNumbers","makeMove","react_default","a","createElement","className","map","available","number","key","disabled","onClick","removeBadOptions","moves","sumsOfMoves","coins","allCoins","Object","toConsumableArray","Set","concat","sort","b","reducedCoins","forEach","x","i","y","j","delete","getCoins","n","waysToReturnChange","denominations","numOfCoins","amount","length","GameHistory","player","m","playerMove","displayWinnerIfThereWasOne","MAX_NUMBER_AVAILABLE","handleMoves","state","move","push","add","calculateSumsOfMoves","App","_React$useReducer","React","useReducer","Array","fill","_React$useReducer2","slicedToArray","_React$useReducer2$","href","target","rel","class","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de4e85f7.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function GameBoard ({possibleNumbers, makeMove}) {\n  return (\n    <div className=\"GameBoard\">\n      {possibleNumbers && possibleNumbers.map((available, number) => \n        number > 0 ? <button key={number} disabled={!available} onClick={() => makeMove(number)}>{number}</button> : null\n      )}\n    </div>\n  )\n}","// =========================================================================\n/**\n * @function waysToReturnChange\n * Adapted from https://gist.github.com/Arieg419/cdca8d2b8c17e68de2a6bd2e1a8b664f#file-makechangerecursivefinal-js\n * \n * @param {Array} denominations \n * @param {Number} numOfCoins \n * @param {Number} amount \n */\nfunction waysToReturnChange(denominations, numOfCoins, amount) {\n  if (numOfCoins < 0) return 0;\n  if (amount === 0) return 1;\n  if (amount < 0) return 0;\n  if (numOfCoins < 0 && amount > 0) return 0;\n  return (\n    waysToReturnChange(denominations, numOfCoins, amount - denominations[numOfCoins]) + \n    waysToReturnChange(denominations, numOfCoins - 1, amount)\n  ) \n}\n// =========================================================================\n\nfunction getCoins (moves, sumsOfMoves) {\n  let allCoins = [...new Set([...moves, ...sumsOfMoves])].sort((a,b) => a - b);\n  let reducedCoins = new Set(allCoins);\n  allCoins.forEach((x, i) => {\n    allCoins.forEach((y, j) => {\n      if (x !== y && x % y === 0) {\n        reducedCoins.delete(x)\n      }\n    })\n  })\n  return [...reducedCoins];\n}\n\nexport function calculateSumsOfMoves (moves, sumsOfMoves) {\n  moves.forEach(x => moves.forEach(n => {\n    if (n !== x) {\n      sumsOfMoves.add(x + n)\n    }\n  }))\n  return sumsOfMoves\n}\n\nexport function removeBadOptions (moves, sumsOfMoves, possibleNumbers) {\n  let coins = getCoins(moves, sumsOfMoves) // named after the \"Coin Problem\"\n  return possibleNumbers.map((available, n) => {\n    // no need to check an already invalidated option\n    if (available !== true) return false;\n\n    return waysToReturnChange(coins, coins.length - 1, n) === 0\n  })\n}\n","import React from 'react'\n\nexport default function GameHistory ({moves}) {\n  let player = 2;\n  return (\n    <div className=\"GameHistory\">\n      {moves && moves.map(m => {\n        player = player === 1 ? 2:1\n        let playerMove = <code>Player {player}: {m}</code>\n        let displayWinnerIfThereWasOne = m === 1 ? `Player ${player === 1 ? 2:1} Wins!`: ''\n        return (\n          <div key={m}>\n            <p>{playerMove}</p>\n            <h1>{displayWinnerIfThereWasOne}</h1>\n          </div>\n        )\n      })}\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport GameBoard from './components/GameBoard'\nimport { calculateSumsOfMoves, removeBadOptions } from './components/GameMath'\nimport GameHistory from './components/GameHistory'\n\nconst MAX_NUMBER_AVAILABLE = 500;\n\nconst handleMoves = (state, move) => {\n  if (!move) return state;\n  let {moves, sumsOfMoves, possibleNumbers} = state;\n\n  moves.push(move);\n  sumsOfMoves = calculateSumsOfMoves(moves, sumsOfMoves)\n  possibleNumbers = removeBadOptions(moves, sumsOfMoves, possibleNumbers)\n\n  return {moves, sumsOfMoves, possibleNumbers}\n};\n\nfunction App() {\n  const [{moves, possibleNumbers}, makeMove] = React.useReducer(handleMoves, { \n    moves: [], \n    sumsOfMoves: new Set(), \n    possibleNumbers: new Array(MAX_NUMBER_AVAILABLE+1).fill(true) \n  })\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">Sylver Coinage Game</h1>\n\n      <blockquote>\n        The two players take turns naming positive integers greater than 1 that are not the \n        sum of nonnegative multiples of previously named integers. The player who cannot name \n        such a number loses. For instance, if player A opens with 2, B can win by naming 3. \n        [See the {' '}\n        <a href=\"https://en.wikipedia.org/wiki/Sylver_coinage\" target=\"_blank\" rel=\"noopener noreferrer\">Wikipedia article</a>]\n      </blockquote>\n\n      <hr/>\n      \n      <div className=\"game-container\">\n        <GameBoard possibleNumbers={possibleNumbers} makeMove={makeMove}/>\n        <GameHistory moves={moves} />\n      </div>\n\n      <small class=\"shadow-link\">\n        <a target=\"_blank\" href=\"https://github.com/kyle-west/sylver-coinage\">\n          Created by @kyle-west on GitHub\n        </a>\n      </small>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}